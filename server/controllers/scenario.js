import Scenario from '../models/Scenario.js';
import ScenarioGroup from '../models/ScenarioGroup.js';
import Tweet from '../models/Tweet.js'
import AgentGroup from '../models/AgentGroup.js'
import Agent from '../models/Agent.js'
import mongoose from 'mongoose';
export const createScenario = async (req, res, next) => {
    try {
        const scenario = new Scenario(req.body);
        const savedScenario = await scenario.save();
        const scenarioGroup = await ScenarioGroup.findById(
            req.body.scenarioGroupId
        );
        scenarioGroup.scenarioIds.push(savedScenario._id);
        await scenarioGroup.save();
        res.status(201).json(savedScenario);
    } catch (err) {
        next(err);
    }
};


export const getScenario = async (req, res, next) => {
    try {
        const scenario = await Scenario.findById(req.params.id);
        res.status(200).json(scenario);
    } catch (err) {
        next(err);
    }
};
export const getScenariosByGroup = async (req, res, next) => {
    try {

        const scenario = await Scenario.find({ scenarioGroupId: req.params.scenariogroupid });
        res.status(200).json(scenario);
    } catch (err) {
        next(err);
    }
};


export const deleteScenario = async (req, res, next) => {
    try {
        const scenario = await Scenario.findByIdAndDelete(req.params.id);
        const scenarioGroup = await ScenarioGroup.findById(scenario.scenarioGroupId)
        const result = await scenarioGroup.updateOne(
            { $pull: { scenarioIds: scenario._id } }
        );
        res.status(200).json({ message: "Scenario deleted successfully" });
    } catch (err) {
        next(err);
    }
};

export const rollbackTillScenario = async (req, res, next) => {

    // get scenario group->delete scenarios made after the target scenario->delete the correct scenario->delete tweets generated by that agent group till that timestamp
    let rollbackNeeded = false;
    // const session = await mongoose.startSession();
    // session.startTransaction();
    try {

        const targetScenario = await Scenario.findById(req.params.scenarioId);
        const targetScenarioGroup = await ScenarioGroup.findById(targetScenario.scenarioGroupId);
        const scenariosToDelete = await Scenario.find({
            _id: { $in: targetScenarioGroup.scenarioIds },
            createdAt: { $gte: targetScenario.createdAt }
        });
        const arrayOfScenarioIdsToRemove = [targetScenario._id, ...scenariosToDelete.map(scenario => scenario._id)]
        // const agents = req.params.agentGroupId === "0" ? await Agent.find({ "agentGroupId": "" }) : await AgentGroup.findById(req.params.agentGroupId);
        // const agentArray = req.params.agentGroupId === "0" ? agents.map(agent => agent._id) : agents.agentIds;
        // const a = await Tweet.deleteMany({
        //     agentId: { $in: agentArray },
        //     createdAt: { $gt: targetScenario.createdAt }
        // })
        const targetScenarioCreatedAt = new Date(targetScenario.createdAt);

        // Add 5 hours and 30 minutes in milliseconds (5 hours * 60 minutes * 60 seconds * 1000 milliseconds + 30 minutes * 60 seconds * 1000 milliseconds)
        const offsetMilliseconds = 5 * 60 * 60 * 1000 + 30 * 60 * 1000;

        // Adjust the target scenario createdAt time by adding the offset
        const adjustedTime = targetScenarioCreatedAt.getTime() + offsetMilliseconds;

        // Create a new Date object using the adjusted time
        // Create a new Date object using the adjusted time
        const adjustedDate = new Date(adjustedTime);
        const a = await Tweet.deleteMany({
            scenarioGroupId: targetScenario.scenarioGroupId,
            createdAt: { $gte: adjustedTime }
        })


        // console.log(a)
        const result = await targetScenarioGroup.updateOne(
            { $pull: { scenarioIds: { $in: arrayOfScenarioIdsToRemove } } }
        );
        await Scenario.deleteMany({ _id: { $in: scenariosToDelete.map(scenario => scenario._id) } })
        await Scenario.findByIdAndDelete(targetScenario._id)
        // {"session":session}



        res.status(200).json({ message: "Scenario rollbacked successfully" });
    } catch (err) {
        rollbackNeeded = true;
        next(err);
    } finally {

        if (rollbackNeeded) {

        }
    }
};
// export const rollbackTillScenario = async (req, res, next) => {

//     // get scenario group->delete scenarios made after the target scenario->delete the correct scenario->delete tweets generated by that agent group till that timestamp
//     let rollbackNeeded = false;
//     const session = await mongoose.startSession();
//     session.startTransaction();
//     try {

//         const targetScenario = await Scenario.findById(req.params.scenarioId);
//         const targetScenarioGroup = await ScenarioGroup.findById(targetScenario.scenarioGroupId);
//         const scenariosToDelete = await Scenario.find({
//             _id: { $in: targetScenarioGroup.scenarioIds },
//             createdAt: { $gt: targetScenario.createdAt }
//         });
//         const agents = req.params.agentGroupId === "0" ? await Agent.find({ "agentGroupId": "" }) : await AgentGroup.findById(req.params.agentGroupId);
//         const agentArray = req.params.agentGroupId === "0" ? agents.map(agent => agent._id) : agents.agentIds;
//         console.log(agentArray)
//         await Scenario.deleteMany({ _id: { $in: scenariosToDelete.map(scenario => scenario._id) } }).session(session);;
//         await Scenario.findByIdAndDelete(targetScenario._id).session(session);;
//         // {"session":session}
//         const a = await Tweet.deleteMany({
//             agentId: { $in: agentArray },
//             createdAt: { $gt: targetScenario.createdAt }
//         }).session(session);;
//         console.log(a)
//         await session.commitTransaction();
//         session.endSession();

//         res.status(200).json({ message: "Scenario rollbacked successfully" });
//     } catch (err) {
//         rollbackNeeded = true;
//         next(err);
//     } finally {

//         if (rollbackNeeded) {
//             try {
//                 await session.abortTransaction();
//             } catch (abortError) {
//                 next(abortError);
//             } finally {
//                 session.endSession();
//             }
//         }
//     }
// };
